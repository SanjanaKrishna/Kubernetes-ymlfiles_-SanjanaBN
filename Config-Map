>> 1 >> CONFIG MAP ------------------------------------

apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: "3"
  ui_properties_file_name: "user-interface.properties"

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5    
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true

## kubectl get configmap

>> POD FOR CONFIGMAP

# cat pod-configmap.yml ------------------------
apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-pod
spec:
  containers:
    - name: demo
      image: alpine
      command: ["sleep", "3600"]
      env:
        # Define the environment variable
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
                                     # from the key name in the ConfigMap.
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: player_initial_lives # The key to fetch.
        - name: UI_PROPERTIES_FILE_NAME
          valueFrom:
            configMapKeyRef:
              name: game-demo
              key: ui_properties_file_name
      volumeMounts:
      - name: config
        mountPath: "/config"
        readOnly: true
  volumes:
  # You set volumes at the Pod level, then mount them into containers inside that Pod
  - name: config
    configMap:
      # Provide the name of the ConfigMap you want to mount.
      name: game-demo
      # An array of keys from the ConfigMap to create as files
      items:
      - key: "game.properties"
        path: "game.properties"
      - key: "user-interface.properties"
        path: "user-interface.properties"

### kubectl apply -f pod-configmap.yml
### kubectl exec -it configmap-demo-pod /bin/sh , get inside the pod

### env <displays all env variables>
>>> To change the values of the env variables , we can make use of CONFIG MAP , edit there and restart the configMap and  the pods

>>> HOW TO CREATE CONFIG MAP FROM A FILE AND MOUNT IT TO A POD 
### kubectl create configmap my-cmap --from-file=text.txt
### kubectl get configmap
### kubectl get configmap my-cmap -oyaml

>>> USE THE KEY VALUE IN CONFIG FILE
### kubectl create configmap my-cmap-1 --from-file=textFile=text.txt
### kubectl get configmap
### kubectl get configmap my-cmap-1 -oyaml

>> MOUNTING THE CONGIGMAP TO POD
apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-pod
spec:
  containers:
    - name: demo
      image: alpine
      command: ["sleep", "3600"]    
      volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
  volumes:
    - name: config
      configMap:
        name: my-cmap-1 ### config map name
